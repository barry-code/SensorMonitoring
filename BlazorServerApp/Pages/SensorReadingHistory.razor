@page "/sensorReadingHistory"
@page "/sensorReadingHistory/{sensorid:int}"

@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib

@inject SensorService MySensorService

<MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">Sensor Reading History</MudText>

<MudStack Row="true" Class="mt-3">
    <MudButton OnClick="ToggleFilterVisibility" StartIcon="@MudBlazor.Icons.Material.Filled.Filter" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Filter</MudButton>

    @if (IsBusy)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudButton OnClick="RefreshSensorHistory" StartIcon="@MudBlazor.Icons.Material.Filled.Refresh" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Refresh</MudButton>
    }
</MudStack>

@if (!_collapseFilters)
{
    <MudPaper Class="mt-3">
        <MudStack>
            @foreach (var item in _sensorList)
            {
                <MudCheckBox T="bool" Dense="true" Label="@item.SensorName" Checked="@item.Display" CheckedChanged="@(e => SensorSelectionChanged((bool)e, item.SensorId))"></MudCheckBox>
            }
        </MudStack>
    </MudPaper>
}

<MudSelect Class="mt-3 mb-3" Label="Time Period" @bind-Value="@timePeriod" SelectedValuesChanged="@((valueSelected) => TimePeriodChanged(valueSelected) )" Dense="true" T="string" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled">
    @foreach (var item in AvailableTimePeriods)
    {
        <MudSelectItem Value="@item.ToString()"></MudSelectItem>
    }
</MudSelect>

<MudExpansionPanel Text="TEMPERATURE (° Celcius)" Disabled="@(!HasTemperatureData)" IsExpanded="@HasTemperatureData" HideIcon="true" DisableGutters="true">
    <PlotlyChart @bind-Config="configTemperature" @bind-Layout="layoutTemperature" @bind-Data="dataTemperature" @ref="chartTemperature" />
</MudExpansionPanel>

<MudExpansionPanel Class="mb-3" Text="HUMIDITY (%)" Disabled="@(!HasHumidityData)" IsExpanded="@HasHumidityData" HideIcon="true" DisableGutters="true">
    <PlotlyChart @bind-Config="configHumidity" @bind-Layout="layoutHumidity" @bind-Data="dataHumidity" @ref="chartHumidity" />
</MudExpansionPanel>

@code {
    [Parameter]
    public int SensorId { get; set; } = 0;

    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private bool _collapseFilters;
    private List<DisplaySensor> _sensorList = new();
    public bool HasTemperatureData { get; set; }
    public bool HasHumidityData { get; set; }
    public bool IsBusy { get; set; }
    PlotlyChart chartTemperature;
    Config configTemperature = new Config();
    Layout layoutTemperature = new Layout();
    IList<ITrace> dataTemperature = new List<ITrace>();
    PlotlyChart chartHumidity;
    Config configHumidity = new Config();
    Layout layoutHumidity = new Layout();
    IList<ITrace> dataHumidity = new List<ITrace>();

    public IEnumerable<ReadingTimePeriod> AvailableTimePeriods { get; set; } = new List<ReadingTimePeriod>() {
        ReadingTimePeriod.Day,
        ReadingTimePeriod.TwoDays,
        ReadingTimePeriod.ThreeDays,
        ReadingTimePeriod.Week,
        ReadingTimePeriod.TwoWeeks,
        ReadingTimePeriod.Month,
        ReadingTimePeriod.Year,
        ReadingTimePeriod.AllTime };

    public ReadingTimePeriod SelectedTimePeriod { get; set; } = ReadingTimePeriod.Day;
    private string timePeriod = ReadingTimePeriod.Day.ToString();

    protected override async Task OnInitializedAsync()
    {   
        try
        {
            IsBusy = true;

            SetupCharts();

            HasTemperatureData = false;
            HasHumidityData = false;
            _sensorList.Clear();

            var sensorsFound = await MySensorService.GetSensors();

            foreach (var item in sensorsFound)
            {
                _sensorList.Add(new DisplaySensor()
                    {
                        SensorId = item.Id,
                        SensorName = item.Name,
                        Display = false
                    });
            }

            if (SensorId > 0)
            {
                _collapseFilters = true;

                var sensor = _sensorList.Where(s => s.SensorId == SensorId).FirstOrDefault();
                if (sensor is not null)
                {
                    sensor.Display = true;
                    await RefreshSensorHistory();
                }
            }

            await base.OnInitializedAsync();
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task RefreshSensorHistory()
    {
        try
        {
            IsBusy = true;

            _collapseFilters = true;

            HasHumidityData = false;
            HasTemperatureData = false;

            await chartTemperature.Clear();
            await chartHumidity.Clear();

            if (!_sensorList.Any(s => s.Display))
                return;

            var sensorsToCheck = _sensorList.Where(s => s.Display).Select(s => s.SensorId).ToList();

            var readings = await MySensorService.GetSensorReadingHistoryForSensors(sensorsToCheck, SelectedTimePeriod);

            if (readings is null)
                return;

            var tempHistory = readings.Where(s => s.SensorType == SensorType.Temperature).ToList();
            var humHistory = readings.Where(s => s.SensorType == SensorType.Humidity).ToList();

            HasTemperatureData = tempHistory.Count > 0;
            HasHumidityData = humHistory.Count > 0;

            foreach (var item in tempHistory)
            {
                List<object> x = item.Readings.Select(r => (object)r.DateTime).ToList();
                List<object> y = item.Readings.Select(r => (object)r.ReadingValue).ToList();
                await chartTemperature.AddTrace(new Scatter
                    {
                        Name = $"{item.Sensor.Name}",
                        Mode = ModeFlag.Lines | ModeFlag.Markers,
                        X = x,
                        Y = y
                    });
            }

            foreach (var item in humHistory)
            {
                List<object> x = item.Readings.Select(r => (object)r.DateTime).ToList();
                List<object> y = item.Readings.Select(r => (object)r.ReadingValue).ToList();
                await chartHumidity.AddTrace(new Scatter
                    {
                        Name = $"{item.Sensor.Name}",
                        Mode = ModeFlag.Lines | ModeFlag.Markers,
                        X = x,
                        Y = y
                    });
            }

            await UpdateAxisFormat();

        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void SensorSelectionChanged(bool isChecked, int sensorId)
    {
        var sensor = _sensorList.FirstOrDefault(s => s.SensorId == sensorId);

        if (sensor is null)
            return;

        sensor.Display = isChecked;
    }

    private string FormatAsValue(object value)
    {
        return (Math.Round((double)value),1).ToString();
    }

    private string FormatFloatValue(object value)
    {
        var v = (double)value;
        var rounded = Math.Round(v, 1);
        var str = rounded.ToString();
        return str;
    }

    private async Task UpdateAxisFormat()
    {
        var currentFormat = chartTemperature.Layout.XAxis.FirstOrDefault().TickFormat;
        var latestFormat = GetDateFormat();

        if (currentFormat == latestFormat)
            return;

        chartTemperature.Layout.XAxis.FirstOrDefault().TickFormat = latestFormat;
        await chartTemperature.Update();

        chartHumidity.Layout.XAxis.FirstOrDefault().TickFormat = latestFormat;
        await chartHumidity.Update();
    }

    private string GetDateFormat()
    {
        string returnValue;

        switch (SelectedTimePeriod)
        {
            case ReadingTimePeriod.Day:
                returnValue = @"%H:%M";
                break;
            case ReadingTimePeriod.TwoDays:
            case ReadingTimePeriod.ThreeDays:         
            case ReadingTimePeriod.Week:
                returnValue = @"%a %H:%M";
                break;
            case ReadingTimePeriod.TwoWeeks:
            case ReadingTimePeriod.Month:
                returnValue = @"%d %H:%M";
                break;
            case ReadingTimePeriod.AllTime:
            case ReadingTimePeriod.Year:
            default:
                returnValue = @"%d %b %y";
                break;
        }

        return returnValue;
    }

    private void ToggleFilterVisibility()
    {
        _collapseFilters = !_collapseFilters;
    }

    private void SetupCharts()
    {
        configTemperature = new Config
            {
                Responsive = true, 
                DisplayLogo = false, 
                DisplayModeBar = Plotly.Blazor.ConfigLib.DisplayModeBarEnum.False
            };

        configHumidity = new Config
            {
                Responsive = true,
                DisplayLogo = false,
                DisplayModeBar = Plotly.Blazor.ConfigLib.DisplayModeBarEnum.False
            };

        layoutTemperature = new Layout
            {
                Legend = new List<Legend> { new Legend() { 
                    Orientation = Plotly.Blazor.LayoutLib.LegendLib.OrientationEnum.V, 
                    Y = -0.5m, 
                    X = 0m
                } },                
                ShowLegend = true,
                PaperBgColor = Theme.PaletteDark.Surface.ToString(),
                PlotBgColor = Theme.PaletteDark.Surface.ToString(),
                Font = new Font
                {
                    Color = Theme.PaletteDark.TextPrimary.ToString()
                },             
                Margin = new Plotly.Blazor.LayoutLib.Margin(){
                    B = 50, 
                    L = 40, 
                    T = 5, 
                    R = 5
                }, 
                XAxis = new List<XAxis>()
                {
                    new XAxis()
                    {
                        ShowGrid = true,
                        GridDash = "dot",
                        GridWidth = 0.01m,
                        GridColor = Theme.PaletteDark.GrayDark.ToString(),
                        TickFormat = GetDateFormat()
                    }
                },
                YAxis = new List<YAxis>()
                {
                    new YAxis()
                    {
                        ShowGrid = true,
                        GridDash = "dot",
                        GridWidth = 0.01m,
                        GridColor = Theme.PaletteDark.GrayDark.ToString(),
                        TickSuffix = "°"
                    }
                }
            };

        layoutHumidity = new Layout
            {
                Legend = new List<Legend> { new Legend() { 
                    Orientation = Plotly.Blazor.LayoutLib.LegendLib.OrientationEnum.V, 
                    Y = -0.5m,
                    X = 0m
                } },
                ShowLegend = true,
                PaperBgColor = Theme.PaletteDark.Surface.ToString(),
                PlotBgColor = Theme.PaletteDark.Surface.ToString(),
                Font = new Font
                {
                    Color = Theme.PaletteDark.TextPrimary.ToString()
                },
                Margin = new Plotly.Blazor.LayoutLib.Margin()
                {
                    B = 50,
                    L = 40,
                    T = 5,
                    R = 5
                },
                XAxis = new List<XAxis>()
                {
                    new XAxis()
                    {
                        ShowGrid = true,
                        GridDash = "dot",
                        GridWidth = 0.01m,
                        GridColor = Theme.PaletteDark.GrayDark.ToString(),
                        TickFormat = GetDateFormat()
                    }
                },
                YAxis = new List<YAxis>()
                {
                    new YAxis()
                    {
                        ShowGrid = true,
                        GridDash = "dot",
                        GridWidth = 0.01m,
                        GridColor = Theme.PaletteDark.GrayDark.ToString(),
                        TickSuffix = "%"
                    }
                }
            };
    }

    private void TimePeriodChanged(IEnumerable<string> value)
    {
        if (!Enum.TryParse<ReadingTimePeriod>(value.FirstOrDefault(), true, out ReadingTimePeriod result))
            return;

        SelectedTimePeriod = result;
        timePeriod = SelectedTimePeriod.ToString();
    }

    internal class DisplaySensor
    {
        public int SensorId { get; set; }
        public string SensorName { get; set; } = string.Empty;
        public bool Display { get; set; }
    }
}