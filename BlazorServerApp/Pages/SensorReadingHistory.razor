@page "/sensorReadingHistory"
@page "/sensorReadingHistory/{sensorid:int}"

@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using System.Diagnostics

@inject SensorService MySensorService

<MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">Sensor Reading History</MudText>

<MudStack Row="true" Class="mt-3">
    <MudButton OnClick="ToggleFilterVisibility" StartIcon="@MudBlazor.Icons.Material.Filled.FilterAlt" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Filter</MudButton>
    <MudButton OnClick="RefreshSensorHistory" StartIcon="@MudBlazor.Icons.Material.Filled.Refresh" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Refresh</MudButton>
</MudStack>

@if (!_collapseFilters)
{
    <MudPaper Class="mt-3">
        <MudStack>
            @foreach (var item in _sensorList)
            {
                <MudCheckBox T="bool" Dense="true" Label="@item.SensorName" Checked="@item.Display" CheckedChanged="@(e => SensorSelectionChanged((bool)e, item.SensorId))"></MudCheckBox>
            }
        </MudStack>
    </MudPaper>
}

<MudSelect Class="mt-3 mb-3" Label="Time Period" @bind-Value="@timePeriod" SelectedValuesChanged="@((valueSelected) => TimePeriodChanged(valueSelected) )" Dense="true" T="string" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled">
    @foreach (var item in AvailableTimePeriods)
    {
        <MudSelectItem Value="@item.ToString()"></MudSelectItem>
    }
</MudSelect>

<MudExpansionPanel Text="TEMPERATURE (° Celcius)" Disabled="@(!HasTemperatureData)" IsExpanded="@HasTemperatureData" HideIcon="true" DisableGutters="true">
    <PlotlyChart @bind-Config="configTemperature" @bind-Layout="layoutTemperature" @bind-Data="dataTemperature" @ref="chartTemperature" />
    @if (_tempSensorReadingAggregates.Count > 0)
    {
        <MudTable Class="mx-1 mt-3" T="SensorReadingAggregate" Items="@_tempSensorReadingAggregates" Dense="true" Elevation="3" Outlined=true Breakpoint="Breakpoint.None">
            <HeaderContent>
                <MudTh Style="font-size:12px;padding-left:4px;padding-right:0px;">Name</MudTh>
                <MudTh Style="font-size:12px;padding-left:0px;padding-right:0px;">Min</MudTh>
                <MudTh Style="font-size:12px;padding-left:0px;padding-right:0px;">Max</MudTh>
                <MudTh Style="font-size:12px;padding-left:0px;padding-right:4px;">Avg</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="font-size:12px;padding-left:4px;padding-right:0px;" DataLabel="Name">@context.SensorDisplayName</MudTd>
                    <MudTd Style="font-size:12px;padding-left:0px;padding-right:0px;" DataLabel="Min">@context.Min</MudTd>
                    <MudTd Style="font-size:12px;padding-left:0px;padding-right:0px;" DataLabel="Max">@context.Max</MudTd>
                    <MudTd Style="font-size:12px;padding-left:0px;padding-right:4px;" DataLabel="Avg">@context.Avg</MudTd>
                </RowTemplate>
        </MudTable>    
    }
</MudExpansionPanel>

<MudExpansionPanel Class="mb-3" Text="HUMIDITY (%)" Disabled="@(!HasHumidityData)" IsExpanded="@HasHumidityData" HideIcon="true" DisableGutters="true">
    <PlotlyChart @bind-Config="configHumidity" @bind-Layout="layoutHumidity" @bind-Data="dataHumidity" @ref="chartHumidity" />
    @if (_humSensorReadingAggregates.Count > 0)
    {
        <MudTable Class="mx-1 mt-3" T="SensorReadingAggregate" Items="@_humSensorReadingAggregates" Dense="true" Elevation="3" Outlined=true Breakpoint="Breakpoint.None">
            <HeaderContent>
                <MudTh Style="font-size:12px;padding-left:4px;padding-right:0px;">Name</MudTh>
                <MudTh Style="font-size:12px;padding-left:0px;padding-right:0px;">Min</MudTh>
                <MudTh Style="font-size:12px;padding-left:0px;padding-right:0px;">Max</MudTh>
                <MudTh Style="font-size:12px;padding-left:0px;padding-right:4px;">Avg</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="font-size:12px;padding-left:4px;padding-right:0px;" DataLabel="Name">@context.SensorDisplayName</MudTd>
                    <MudTd Style="font-size:12px;padding-left:0px;padding-right:0px;" DataLabel="Min">@context.Min</MudTd>
                    <MudTd Style="font-size:12px;padding-left:0px;padding-right:0px;" DataLabel="Max">@context.Max</MudTd>
                    <MudTd Style="font-size:12px;padding-left:0px;padding-right:4px;" DataLabel="Avg">@context.Avg</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudExpansionPanel>

@if (!string.IsNullOrWhiteSpace(_queryExecutionTime))
{
    <MudText Align="Align.Right" Class="mb-3" Style="font-size:10px;">@_queryExecutionTime</MudText>
}

<MudOverlay Visible="IsBusy" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {
    [Parameter]
    public int SensorId { get; set; } = 0;

    [CascadingParameter]
    private MudTheme Theme { get; set; }

    private bool _collapseFilters;
    private List<DisplaySensor> _sensorList = new();
    public bool HasTemperatureData { get; set; }
    public bool HasHumidityData { get; set; }
    public bool IsBusy { get; set; }
    PlotlyChart chartTemperature;
    Config configTemperature = new Config();
    Layout layoutTemperature = new Layout();
    IList<ITrace> dataTemperature = new List<ITrace>();
    PlotlyChart chartHumidity;
    Config configHumidity = new Config();
    Layout layoutHumidity = new Layout();
    IList<ITrace> dataHumidity = new List<ITrace>();
    public long ElapsedTime { get; set; }
    List<SensorReadingAggregate> _tempSensorReadingAggregates = new();
    List<SensorReadingAggregate> _humSensorReadingAggregates = new();
    private string _queryExecutionTime = string.Empty;

    public IEnumerable<ReadingTimePeriod> AvailableTimePeriods { get; set; } = new List<ReadingTimePeriod>() {
        ReadingTimePeriod.Day,
        ReadingTimePeriod.TwoDays,
        ReadingTimePeriod.ThreeDays,
        ReadingTimePeriod.Week,
        ReadingTimePeriod.TwoWeeks,
        ReadingTimePeriod.Month,
        ReadingTimePeriod.Year,
        ReadingTimePeriod.AllTime };

    public ReadingTimePeriod SelectedTimePeriod { get; set; } = ReadingTimePeriod.Day;
    private string timePeriod = ReadingTimePeriod.Day.ToString();

    protected override async Task OnInitializedAsync()
    {   
        try
        {
            IsBusy = true;

            SetupCharts();

            HasTemperatureData = false;
            HasHumidityData = false;
            _sensorList.Clear();
            _tempSensorReadingAggregates.Clear();
            _humSensorReadingAggregates.Clear();

            var sensorsFound = await MySensorService.GetSensors();

            foreach (var item in sensorsFound)
            {
                _sensorList.Add(new DisplaySensor()
                    {
                        SensorId = item.Id,
                        SensorName = item.Name,
                        Display = false
                    });
            }

            if (SensorId > 0)
            {
                _collapseFilters = true;

                var sensor = _sensorList.Where(s => s.SensorId == SensorId).FirstOrDefault();
                if (sensor is not null)
                {
                    sensor.Display = true;
                    await RefreshSensorHistory();
                }
            }

            await base.OnInitializedAsync();
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task RefreshSensorHistory()
    {
        try
        {
            IsBusy = true;

            _queryExecutionTime = string.Empty;

            _collapseFilters = true;

            HasHumidityData = false;
            HasTemperatureData = false;

            await chartTemperature.Clear();
            await chartHumidity.Clear();

            _tempSensorReadingAggregates.Clear();
            _humSensorReadingAggregates.Clear();

            if (!_sensorList.Any(s => s.Display))
                return;

            var sensorsToCheck = _sensorList.Where(s => s.Display).Select(s => s.SensorId).ToList();

            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            var readings = await MySensorService.GetSensorReadingHistoryForSensors(sensorsToCheck, SelectedTimePeriod);

            if (readings is null)
                return;

            var tempHistory = readings.Where(s => s.SensorType == SensorType.Temperature).ToList();
            var humHistory = readings.Where(s => s.SensorType == SensorType.Humidity).ToList();

            HasTemperatureData = tempHistory.Count > 0 && tempHistory.Any(t => t.Readings.Count > 0);
            HasHumidityData = humHistory.Count > 0 && humHistory.Any(t => t.Readings.Count > 0);

            foreach (var item in tempHistory)
            {
                if (item.Readings.Count == 0)
                    continue;

                var min = Math.Round(item.Readings.Min(r => r.ReadingValue), 1);
                var max = Math.Round(item.Readings.Max(r => r.ReadingValue), 1);
                var avg = Math.Round(item.Readings.Average(r => r.ReadingValue), 1);

                _tempSensorReadingAggregates.Add(new SensorReadingAggregate()
                    {
                        Min = $"{min}°C",
                        Max = $"{max}°C",
                        Avg = $"{avg}°C",
                        SensorId = item.Sensor.Id,
                        IsTemperatureType = true,
                        SensorName = item.Sensor.Name
                    });

                List<object> x = item.Readings.Select(r => (object)r.DateTime).ToList();
                List<object> y = item.Readings.Select(r => (object)r.ReadingValue).ToList();

                await chartTemperature.AddTrace(new Scatter
                    {
                        Name = $"{item.Sensor.Name}",
                        Mode = ModeFlag.Lines | ModeFlag.Markers,
                        X = x,
                        Y = y
                    });
            }
            
            foreach (var item in humHistory)
            {
                if (item.Readings.Count == 0)
                    continue;

                var min = Math.Round(item.Readings.Min(r => r.ReadingValue), 1);
                var max = Math.Round(item.Readings.Max(r => r.ReadingValue), 1);
                var avg = Math.Round(item.Readings.Average(r => r.ReadingValue), 1);

                _humSensorReadingAggregates.Add(new SensorReadingAggregate()
                    {
                        Min = $"{min}%",
                        Max = $"{max}%",
                        Avg = $"{avg}%",
                        SensorId = item.Sensor.Id,
                        IsTemperatureType = false,
                        SensorName = item.Sensor.Name
                    });

                List<object> x = item.Readings.Select(r => (object)r.DateTime).ToList();
                List<object> y = item.Readings.Select(r => (object)r.ReadingValue).ToList();

                await chartHumidity.AddTrace(new Scatter
                    {
                        Name = $"{item.Sensor.Name}",
                        Mode = ModeFlag.Lines | ModeFlag.Markers,
                        X = x,
                        Y = y
                    });
            }

            stopWatch.Stop();
            _queryExecutionTime = $"Query Executed in {stopWatch.ElapsedMilliseconds}ms";

            await UpdateAxisFormat();
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void SensorSelectionChanged(bool isChecked, int sensorId)
    {
        var sensor = _sensorList.FirstOrDefault(s => s.SensorId == sensorId);

        if (sensor is null)
            return;

        sensor.Display = isChecked;
    }

    private async Task UpdateAxisFormat()
    {
        var currentFormat = chartTemperature.Layout.XAxis.FirstOrDefault().TickFormat;
        var latestFormat = GetDateFormat();

        if (currentFormat == latestFormat)
            return;

        chartTemperature.Layout.XAxis.FirstOrDefault().TickFormat = latestFormat;
        await chartTemperature.Update();

        chartHumidity.Layout.XAxis.FirstOrDefault().TickFormat = latestFormat;
        await chartHumidity.Update();
    }

    private string GetDateFormat()
    {
        string returnValue;

        switch (SelectedTimePeriod)
        {
            case ReadingTimePeriod.Day:
                returnValue = @"%H:%M";
                break;
            case ReadingTimePeriod.TwoDays:
            case ReadingTimePeriod.ThreeDays:         
            case ReadingTimePeriod.Week:
                returnValue = @"%a %H:%M";
                break;
            case ReadingTimePeriod.TwoWeeks:
            case ReadingTimePeriod.Month:
                returnValue = @"%d %H:%M";
                break;
            case ReadingTimePeriod.AllTime:
            case ReadingTimePeriod.Year:
            default:
                returnValue = @"%d %b %y";
                break;
        }

        return returnValue;
    }

    private void ToggleFilterVisibility()
    {
        _collapseFilters = !_collapseFilters;
    }

    private void SetupCharts()
    {
        configTemperature = new Config
            {
                Responsive = true, 
                DisplayLogo = false, 
                DisplayModeBar = Plotly.Blazor.ConfigLib.DisplayModeBarEnum.True,
                ModeBarButtonsToRemove = new List<string>()
                {
                    "select2d",
                    "lasso2d"
                }
            };

        configHumidity = new Config
            {
                Responsive = true,
                DisplayLogo = false,
                DisplayModeBar = Plotly.Blazor.ConfigLib.DisplayModeBarEnum.True,
                ModeBarButtonsToRemove = new List<string>()
                {
                    "select2d",
                    "lasso2d"
                }
            };

        layoutTemperature = new Layout
            {
                DragMode = DragModeEnum.False,                
                Legend = new List<Legend> { new Legend() { 
                    Orientation = Plotly.Blazor.LayoutLib.LegendLib.OrientationEnum.V, 
                    Y = -0.5m, 
                    X = 0m
                } },                
                ShowLegend = true,
                PaperBgColor = Theme.PaletteDark.Surface.ToString(),
                PlotBgColor = Theme.PaletteDark.Surface.ToString(),
                Font = new Font
                {
                    Color = Theme.PaletteDark.TextPrimary.ToString()
                },             
                Margin = new Plotly.Blazor.LayoutLib.Margin(){
                    B = 50, 
                    L = 50, 
                    T = 40, 
                    R = 10
                }, 
                XAxis = new List<XAxis>()
                {
                    new XAxis()
                    {
                        ShowGrid = true,
                        GridDash = "dot",
                        GridWidth = 0.01m,
                        GridColor = Theme.PaletteDark.GrayDark.ToString(),
                        TickFormat = GetDateFormat(),
                        HoverFormat = @"%H:%M %d-%b-%y"
                    }
                },
                YAxis = new List<YAxis>()
                {
                    new YAxis()
                    {
                        ShowGrid = true,
                        GridDash = "dot",
                        GridWidth = 0.01m,
                        GridColor = Theme.PaletteDark.GrayDark.ToString(),
                        TickSuffix = "°"
                    }
                }
            };

        layoutHumidity = new Layout
            {
                DragMode = DragModeEnum.False,
                Legend = new List<Legend> { new Legend() { 
                    Orientation = Plotly.Blazor.LayoutLib.LegendLib.OrientationEnum.V, 
                    Y = -0.5m,
                    X = 0m
                } },
                ShowLegend = true,
                PaperBgColor = Theme.PaletteDark.Surface.ToString(),
                PlotBgColor = Theme.PaletteDark.Surface.ToString(),
                Font = new Font
                {
                    Color = Theme.PaletteDark.TextPrimary.ToString()
                },
                Margin = new Plotly.Blazor.LayoutLib.Margin()
                {
                    B = 50,
                    L = 50,
                    T = 40,
                    R = 10
                },
                XAxis = new List<XAxis>()
                {
                    new XAxis()
                    {
                        ShowGrid = true,
                        GridDash = "dot",
                        GridWidth = 0.01m,
                        GridColor = Theme.PaletteDark.GrayDark.ToString(),
                        TickFormat = GetDateFormat(),
                        HoverFormat = @"%H:%M %d-%b-%y"
                    }
                },
                YAxis = new List<YAxis>()
                {
                    new YAxis()
                    {
                        ShowGrid = true,
                        GridDash = "dot",
                        GridWidth = 0.01m,
                        GridColor = Theme.PaletteDark.GrayDark.ToString(),
                        TickSuffix = "%"
                    }
                }
            };
    }

    private void TimePeriodChanged(IEnumerable<string> value)
    {
        if (!Enum.TryParse<ReadingTimePeriod>(value.FirstOrDefault(), true, out ReadingTimePeriod result))
            return;

        SelectedTimePeriod = result;
        timePeriod = SelectedTimePeriod.ToString();
    }

    internal class DisplaySensor
    {
        public int SensorId { get; set; }
        public string SensorName { get; set; } = string.Empty;
        public bool Display { get; set; }
    }

    internal class SensorReadingAggregate
    {
        public int SensorId { get; set; }
        public string SensorName { get; set; } = string.Empty;
        public string SensorDisplayName => GetSensorLocationNameOnly(SensorName);
        public string Min { get; set; } = string.Empty;
        public string Max { get; set; } = string.Empty;
        public string Avg { get; set; } = string.Empty;
        public bool IsTemperatureType { get; set; }

        private string GetSensorLocationNameOnly(string fullSensorName)
        {
            var parts = fullSensorName.Split(" ");

            if (parts is null)
                return fullSensorName;

            return parts[0];
        }
    }
}