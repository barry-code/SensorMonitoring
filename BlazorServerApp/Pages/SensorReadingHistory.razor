@page "/sensorReadingHistory"
@page "/sensorReadingHistory/{sensorid:int}"
@using SensorMonitoring.Shared.Api

@inject SensorService MySensorService

<MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">Sensor Reading History</MudText>

<MudStack Row="true" Class="mt-3">
    <MudButton OnClick="ToggleFilterVisibility" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Filter</MudButton>
    <MudButton OnClick="RefreshSensorHistory" Color="MudBlazor.Color.Primary" Variant="Variant.Filled">Refresh</MudButton>
</MudStack>
@if (!_collapseFilters)
    {
        <MudPaper Class="mt-3">
            <MudStack>
                @foreach (var item in _sensorList)
                {
                    <MudCheckBox T="bool" Dense="true" Label="@item.SensorName" Checked="@item.Display" CheckedChanged="@(e => SensorSelectionChanged((bool)e, item.SensorId))"></MudCheckBox>
                }
            </MudStack>
        </MudPaper>
    }

<MudSelect Class="mt-3 mb-3" Label="Time Period" Dense="true" T="string" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled" >
    @foreach (var item in AvailableTimePeriods)
    {
        <MudSelectItem Value="@item.ToString()"></MudSelectItem>
    }
</MudSelect>

<div>
    <ApexChart
        TItem="ChartData"
        Title="Temperature" 
        XAxisType="XAxisType.Datetime" 
        Options="@_chartOptions">

        @foreach (var item in _sensorList.Where(s => s.Display))
        {
            <ApexPointSeries 
                TItem="ChartData"
                Items="TemperatureData.Where(d => d.SensorId == item.SensorId)"
                Name="@item.SensorName"
                SeriesType="SeriesType.Line"
                XValue="e => e.TimeStamp.Ticks"
                YValue="e => e.ReadingValue"
                />
        }
    </ApexChart>
</div>



@code {
    [Parameter]
    public int SensorId { get; set; } = 0;

    private bool _collapseFilters;
    private List<DisplaySensor> _sensorList = new();
    private ApexChartOptions<ChartData> _chartOptions = new();
    private List<ChartData> TemperatureData = new();
    private List<ChartData> HumidityData = new();

    public IEnumerable<ReadingTimePeriod> AvailableTimePeriods { get; set; } = new List<ReadingTimePeriod>() {
        ReadingTimePeriod.Day,
        ReadingTimePeriod.TwoDays,
        ReadingTimePeriod.ThreeDays,
        ReadingTimePeriod.Week,
        ReadingTimePeriod.TwoWeeks,
        ReadingTimePeriod.Month,
        ReadingTimePeriod.Year,
        ReadingTimePeriod.AllTime };

    public ReadingTimePeriod SelectedTimePeriod = ReadingTimePeriod.Week;

    protected override async Task OnInitializedAsync()
    {
        SetupChart();

        _sensorList.Clear();
        TemperatureData.Clear();
        HumidityData.Clear();

        var sensorsFound = await MySensorService.GetSensors();

        foreach (var item in sensorsFound)
        {
            _sensorList.Add(new DisplaySensor() {
                    SensorId = item.Id,
                    SensorName = item.Name,
                    Display = false
            });
        }

        if (SensorId > 0)
        {
            _collapseFilters = true;

            var sensor = _sensorList.Where(s => s.SensorId == SensorId).FirstOrDefault();
            if (sensor is not null)
            {
                sensor.Display = true;
                await RefreshSensorHistory();
            }
        }

        await base.OnInitializedAsync();
    }

    private async Task RefreshSensorHistory()
    {
        TemperatureData.Clear();
        HumidityData.Clear();

        if (!_sensorList.Any(s => s.Display))
            return;

        var sensorsToCheck = _sensorList.Where(s => s.Display).Select(s => s.SensorId).ToList();

        var readings = await MySensorService.GetSensorReadingHistoryForSensors(sensorsToCheck, SelectedTimePeriod);

        TemperatureData.AddRange(GetChartData(readings.FirstOrDefault(s => s.SensorType == SensorType.Temperature)));
        //HumiditySensorHistories.AddRange(readings.Where(s => s.SensorType == SensorType.Humidity));

        //foreach (var item in TempSensorHistories)
        //{
        //    if (item.SensorType == SensorType.Temperature)
        //    {
        //        TemperatureSeries.Add(new ChartSeries()
        //            {
        //                Name = item.Sensor.Name,
        //                Data = item.Readings.Select(x => (double)x.ReadingValue).ToArray()
        //            });
        //    }
        //    else if (item.SensorType == SensorType.Humidity)
        //    {
        //        HumiditySeries.Add(new ChartSeries()
        //            {
        //                Name = item.Sensor.Name,
        //                Data = item.Readings.Select(x => (double)x.ReadingValue).ToArray()
        //            });
        //    }
        //}

        _collapseFilters = true;
    }

    private void SensorSelectionChanged(bool isChecked, int sensorId)
    {
        var sensor = _sensorList.FirstOrDefault(s => s.SensorId == sensorId);

        if (sensor is null)
            return;

        sensor.Display = isChecked;
    }

    private string FormatAsValue(object value)
    {
        return (Math.Round((double)value),1).ToString();
    }

    private string FormatFloatValue(object value)
    {
        var v = (double)value;
        var rounded = Math.Round(v, 1);
        var str = rounded.ToString();
        return str;
    }

    private string FormatTheDate(object value)
    {
        if (value != null)
        {
            string returnValue;

            switch (SelectedTimePeriod)
            {
                case ReadingTimePeriod.Day:
                    returnValue = Convert.ToDateTime(value).ToString("HH:mm");
                    break;
                case ReadingTimePeriod.TwoDays:
                case ReadingTimePeriod.ThreeDays:
                case ReadingTimePeriod.Week:
                    returnValue = Convert.ToDateTime(value).ToString("ddd");
                    break;
                case ReadingTimePeriod.TwoWeeks:
                case ReadingTimePeriod.Month:
                    returnValue = Convert.ToDateTime(value).ToString("dd");
                    break;
                case ReadingTimePeriod.AllTime:
                case ReadingTimePeriod.Year:
                default:
                    returnValue = Convert.ToDateTime(value).ToString("MMM");
                    break;
            }

            return returnValue;
        }

        return string.Empty;
    }

    private void ToggleFilterVisibility(){
        _collapseFilters = !_collapseFilters;
    }

    internal class DisplaySensor
    {
        public int SensorId { get; set; }
        public string SensorName { get; set; } = string.Empty;
        public bool Display { get; set; }
    }

    internal class MyData
    {
        public string Category { get; set; } = string.Empty;
        public int NetProfit { get; set; }
        public int Revenue { get; set; }
    }

    public class ChartData{
        public int SensorId { get; set; }
        public string SensorName { get; set; } = string.Empty;
        public decimal ReadingValue { get; set; }
        public DateTime TimeStamp { get; set; }
    }

    public ChartData[] GetChartData(SensorHistory history)
    {
        if (history is null)
            return new ChartData[0];

        var result = history.Readings.Select(x => new ChartData()
        {
            SensorId = x.SensorId,
            SensorName = x.SensorName,
            ReadingValue = (decimal)Math.Round(x.ReadingValue,1),
            TimeStamp = x.DateTime
        });

        return result.ToArray() ?? new ChartData[0];
    }

    private void SetupChart()
    {
        _chartOptions.Theme = new Theme()
            {
                Mode = Mode.Dark
            };
    }
}