@page "/sensorReadingSummary"
@page "/"
@using System.Collections.ObjectModel

@inject NavigationManager NavigationManager;
@inject SensorService MySensorService;

<MudTable Items="@Readings" T="SensorSummary" Loading="@IsLoading" Elevation="2" Breakpoint="Breakpoint.None" OnRowClick="RowClickEvent" RowClass="cursor-pointer">
    <ToolBarContent>
        <MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">Sensor Summary</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Reading</MudTh>
        <MudTh Class="d-none d-md-table-cell">Time</MudTh>
    </HeaderContent>
    <RowTemplate>
        @{
            MudBlazor.Color colorToUse = context.IsCommsLost ? MudBlazor.Color.Error : MudBlazor.Color.Success;
            string connectionIconToUse = context.IsCommsLost ? Icons.Material.Filled.SensorsOff : Icons.Material.Filled.Sensors;
            string readingIconToUse = context.Sensor.Description.ToLower().Contains("humidity") ? Icons.Material.Filled.WaterDrop : Icons.Material.Filled.Thermostat;
        }
        <MudTd DataLabel="Name" >            
            <MudStack Row="true" AlignItems="AlignItems.Start">
                <MudText Typo="Typo.body2">@context.Sensor.Name</MudText>
                <MudIcon Size="Size.Small" Icon="@connectionIconToUse" Color="@colorToUse" />
            </MudStack>            
        </MudTd>

        <MudTd DataLabel="Reading">
            <MudStack Row="true" AlignItems="AlignItems.Start">
                <MudIcon Size="Size.Small" Icon="@readingIconToUse" />
                <MudText Typo="Typo.body2" >@context.LastReadingDisplay</MudText>
            </MudStack>            
        </MudTd>

        <MudTd DataLabel="Time" Class="d-none d-md-table-cell">@context.LastReadingTimeDisplay</MudTd>
    </RowTemplate>
</MudTable>

    @code {
    private bool isFirstLoad;
    public bool IsLoading { get; set; }
    public ObservableCollection<SensorSummary> Readings { get; set; } = new ObservableCollection<SensorSummary>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isFirstLoad = firstRender;

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;

            var res = await MySensorService.GetSensorReadingSummary();

            foreach (var item in res)
            {
                Readings.Add(item);
            }

            await base.OnInitializedAsync();
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void NavigateToSensorHistory(int sensorId)
    {
        NavigationManager.NavigateTo($"/sensorReadingHistory/{sensorId}");
    }

    private void RowClickEvent(TableRowClickEventArgs<SensorSummary> tableRowClickEventArgs)
    {
        var sensor = tableRowClickEventArgs.Item as SensorSummary;

        if (sensor is null)
            return;

        NavigationManager.NavigateTo($"/sensorReadingHistory/{sensor.Sensor.Id}");
    }
}
